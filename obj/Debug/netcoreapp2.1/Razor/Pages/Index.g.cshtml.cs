#pragma checksum "E:\GitHub\HolidayChecklist\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d46f11bed2f3e2c9ae36dc7a47339688a4eaf816"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(HolidayChecklist.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(HolidayChecklist.Pages.Pages_Index), null)]
namespace HolidayChecklist.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\GitHub\HolidayChecklist\Pages\_ViewImports.cshtml"
using HolidayChecklist;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d46f11bed2f3e2c9ae36dc7a47339688a4eaf816", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0f90e6b79a2498bf38006f64a6095ea7bf4a53d3", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "E:\GitHub\HolidayChecklist\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
            BeginContext(71, 1718, true);
            WriteLiteral(@"<div class=""container"" id=""App"">
<div v-if=""desktop"" style=""position: fixed; top: 0; left: 0; background-color: #333; width: 200px; height: 100%"">
    <ul style=""color: white; margin-top: 70px; list-style:none; padding-left: 5px;"">
        <li style=""font-size: 2em"">
            Coming Soon!
        </li>
        <li style=""margin-top: 50px; padding-right: 5px""> 
            <div class=""input-group input-group-sm mb-3"">
                <div class=""input-group-prepend"">
                    <span class=""input-group-text"" id=""inputGroup-sizing-sm"">Text Search</span>
                </div>
                <input v-model=""episodeSearchTerm"" v-on:change =""getOverviewSearch(episodeSearchTerm)"" type=""text"" class=""form-control"" aria-label=""Small"" aria-describedby=""inputGroup-sizing-sm"">
            </div>
        </li>
        <li style=""margin-top: 50px; padding-right: 5px"">
            Holiday Selection
            <div class=""list-group"">
                <a v-for=""holiday in holidays"" v-on:click.st");
            WriteLiteral(@"op.prevent=""getShows(holiday)"" href=""#"" class=""list-group-item list-group-item-action"">{{holiday}}</a>
            </div>
        </li>
        <li>
            <button v-if=""desktop"" class = ""btn btn-success"" v-on:click.stop.prevent=""randomShow()"" style=""z-index: 10; height: 60px; width: 60px; border-radius: 30px; border-style: outset; position: fixed; bottom: 20px; left: 70px; font-size: 2em;"">
                <div style=""vertical-align:middle;""><i class=""glyphicon glyphicon-random""></i></div>
            </button>
        </li>

    </ul>
</div>
    <div v-bind:style=""sidebar"">
        <div id = ""searchForm"" class = ""container"" style = ""padding-top: 20px;"">
            ");
            EndContext();
            BeginContext(1789, 360, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "721dca5ff3634c6e9d6f299d41963fcc", async() => {
                BeginContext(1795, 347, true);
                WriteLiteral(@"
                <div class = ""col-xs-12 col-md-5"">
                    <input v-model=""searchTerm"" class=""form-control form-control input-lg"" type=""text"" placeholder=""Search for a show...""v-on:keyup=""searchShow()"" v-on:keyup.esc=""emptySearch()""v-on:keyup.enter.stop.prevent=""showDetails(searchResults[0])"">
                </div>
            ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2149, 7506, true);
            WriteLiteral(@"
        </div>
        <div  v-show =""showSearchResults"" class=""container"" stle=""z-index: 3;"">
        <div class=""row text-center text-left"">
            <div class=""col-xs-12 col-md-6"">
            <div class=""list-group my-3"">
                <a v-for = ""item in searchResults""v-on:click=""showDetails(item)"" href=""#"" class=""list-group-item list-group-item-action d-flex   align-items-center"">
                    <div class =""row"">
                        <h4 v-if=""desktop"">{{item.name}} ({{item.first_air_date}})</h4>
                        <p v-else class=""mb-0 text-center"">{{item.name}} - ({{item.first_air_date.substring(0,4)}})</p>
                        <img v-if=""desktop"" class=""d-block float-right img-thumbnail img-fluid"" v-bind:src=""imgURL + item.poster_path"" width=""60"" height=""60"" > 
                        <button v-on:click.stop.prevent=""showDetails(item)"" class=""btn btn-info""v-if=""desktop""><span class=""glyphicon glyphicon-info-sign"" aria-hidden=""true"" style =""color:white;""></span></but");
            WriteLiteral(@"ton>
                    </div>
                </a>
            </div>
            </div>  
        </div>
        </div>
        <div v-if = ""showHighlightedShow"" class =""col-xs-10 col-md-6"" style =""background: white; margin-top: 20px; position: absolute; top: 50px; z-index: 20; border-radius: 5px; border-style: outset;"">
            <div class=""col-xs-12 col-md-12"">
                <div class=""row"">
                    <div class = ""col-xs-10"">
                        <h3 style=""text-align:center;"">{{highlightedShow.name}}</h3>
                    </div>
                    <div class = ""col-xs-2""> <button class=""btn btn-default"" v-on:click.stop.prevent=""emptySearch()""><span class=""glyphicon glyphicon-remove"" aria-hidden=""true""></span></button></div>
                </div>
                <div class=""row"">
                    <div class=""col-xs-4"" >
                        <div class=""row"">
                            <img v-bind:src=""imgURL + highlightedShow.poster_path"" width=""100%"" sty");
            WriteLiteral(@"le=""border-radius: 10px;""/>
                        </div>
                        <div class=""row"">
                            <div class=""col-xs-12""><button v-on:click=""saveShow(highlightedShow)"" class=""btn btn-danger"" style=""width:100%; margin-top:10px""><span class=""glyphicon glyphicon-heart"" aria-hidden=""true"" style =""color:white;""></span></button></div>
                        </div>
                    </div>
                    <div class=""col-xs-8"">
                        <p>First Air Date: {{highlightedShow.first_air_date}}</p>
                        <p>{{highlightedShow.overview}}</p>
                    </div>
                </div>
                <div class=""row"">
                    <span><button class=""btn btn-default"" style=""width:100%;margin-bottom:10px;"" v-on:click.stop.prevent=""emptySearch()"">Cancel</button></span>
                </div>
            </div>
            
        </div>
        <div v-if = ""showHighlightedEpisode"" class =""col-xs-10 col-md-6"" style =""backgro");
            WriteLiteral(@"und: white; margin-top: 20px; position: absolute; top: 50px; z-index: 20; border-radius: 5px; border-style: outset;"">
            <div class=""col-xs-12 col-md-12"">
                <div class=""row"">
                    <div class = ""col-xs-10"">
                        <h3 style=""text-align:center;"">{{highlightedEpisode.name}}</h3>
                    </div>
                    <div class = ""col-xs-2"" style = ""padding-top: 10px;""> <button v-on:click.stop.prevent=""showHighlightedEpisode=false"" class=""btn btn-default""><span class=""glyphicon glyphicon-remove"" aria-hidden=""true"" style =""color:black;""></span></button></div>
                </div>
                <div class=""row"">
                    <div class=""col-xs-4"" >
                        <div class=""row"">
                            <img v-bind:src=""imgURL + highlightedEpisode.still_path"" width=""100%"" style=""border-radius: 10px;""/>
                        </div>
                    </div>
                    <div class=""col-xs-8"">
           ");
            WriteLiteral(@"             <h4>{{highlightedEpisode.showName}}</h4>
                        <p>Air Date: {{highlightedEpisode.air_date}}</p>
                        <p>S.{{highlightedEpisode.season_number}} - e.{{highlightedEpisode.episode_number}}</p>
                        <p>{{highlightedEpisode.overview}}</p>
                    </div>
                </div>
                <div class=""row"">
                    <span><button class=""btn btn-default"" style=""width:100%;margin-bottom:10px;"" v-on:click.stop.prevent=""showHighlightedEpisode=false"">Close</button></span>
                </div>
            </div>
            
        </div>
        <div v-if = ""showEpisodeList"" class = ""container col-md-6"" >
            <div v-show = ""show.visible"" clss=""col-xs-12"" v-for = ""show in shows"" style=""background: white; border-radius: 5px 30px 50px 15px; padding: 1px; margin: 5px;""> 
            <div data-toggle=""collapse"" v-bind:data-target=""'#' + show.id"" clss=""col-xs-12"">
                <h3 style = ""margin-bottom:1");
            WriteLiteral(@"0px; margin-top:0; overflow:hidden; text-overflow: elipses;background: #f7f7f7;border-radius: 5px 30px 50px 15px; min-height: 2em;"">
                    <div class = ""col-xs-9 col-md-10"">{{show.title}}</div> 
                    <div class = ""col-xs-3 col-md-1""><span><i class=""glyphicon glyphicon-menu-down""></i></span></div>
                    </h3>
                </div>
                <div class=""collapse"" v-bind:id=""show.id"">

                    <ul style = ""padding-left:5px;"">
                        <li  v-for = ""episode in getEpisodes(show.id)"" style = ""list-style-type:none;"">
                            <div v-if=""episode.watched""><input type=""checkbox"" v-on:click =""updateWatched(episode.episodeID)"" v-bind:checked = ""episode.watched"" style=""margin-right: 10px;width: 20px;height: 20px;""><s style=""font-size:1.25em;"">{{episode.seasonNumber}}.{{episode.episodeNumber}}: {{episode.episodeTitle}}</s></div>
                            <div v-else > <input type=""checkbox"" v-on:click =""updateWatched");
            WriteLiteral(@"(episode.episodeID)"" v-bind:checked=""episode.watched"" style=""margin-right: 10px;width: 20px;height: 20px;""><span v-on:click=highlightShow(episode) style=""font-size:1.25em;"">{{episode.seasonNumber}}.{{episode.episodeNumber}}: {{episode.episodeTitle}}</span></div>
                        </li>
                    </ul>
                    <div class=""row"">
                        <div class=""col-xs-5"">
                            <button style=""width: 100%;"" class = btn v-on:click.stop.prevent=""toggleAllWatched(show.id)""><i class=""glyphicon glyphicon-check""></i></button>
                        </div>
                        <div class = ""col-xs-1""></div>
                        <div class = ""col-xs-5""><button v-on:click =""DeleteShow(show.id)"" class=""btn btn-danger"" style=""width:100%;margin-bottom:10px;""><i class=""glyphicon glyphicon-trash""></i></button></div>
                    </div>
                </div>
            </div>
        </div>
        <button v-if=""desktop != true"" class = ""btn btn-");
            WriteLiteral(@"success"" v-on:click.stop.prevent=""randomShow()"" style=""z-index: 10; height: 60px; width: 60px; border-radius: 30px; border-style: outset; position: fixed; bottom: 20px; left: 45%; font-size: 2em;"">
            <div style=""vertical-align:middle;""><i class=""glyphicon glyphicon-random""></i></div>
        </button>
    </div>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(9673, 18185, true);
                WriteLiteral(@"

<script>
    var ItemsVue = new Vue({
            el: '#App',
            data: {
                loading: false,
                desktop: false,
                searchTerm: """",
                episodeSearchTerm: """",
                searchResults: """",
                highlightedShow: """",
                highlightedEpisode: """",
                ads:""E:\\GitHub\\HolidayChecklist\\wwwroot\\images\\Ads.jpg"",
                savedShow:{ 
                    ShowID: 0,
                    ShowTitle: """",
                    ShowBackdropPath: """",
                    ShowOverview:"""",
                    SeasonNumber: 0,
                    EpisodeNumber: 0,
                    EpisodeAirDate: ""1700-01-01"",
                    EpisodeTitle: """",
                    EpisodeOverview: """",
                    Watched: false
                },
                ajaxSeasons: [{
                    id: 0,
                    episodes:[] ,
                    NumberOfSeasons: 0,
                    ");
                WriteLiteral(@"Season: 0
                }],
                shows: [],
                episodes: [] ,
                promise: '',
                promises: [],
                sidebar:"""",
                holidays: [""Christmas"",""Hanukkah"",""Kwanzaa"",""Halloween""],
                showSearchResults: false,
                showHighlightedShow: false,
                showHighlightedEpisode: false,
                showEpisodeList: true,
                baseURL: ""https://api.themoviedb.org/3/"",
                imgURL: ""https://image.tmdb.org/t/p/w300/"",
                apiKEY: ""api_key=dfb21457261ef1c427601ffcefc3da80""
            },
            
            mounted: function () {
                this.getShows(this.holidays[0]);
                this.isDesktop();
            },
            methods: { 
                isDesktop: function() {
                var self = this;
                var md = new MobileDetect(window.navigator.userAgent);
                if( md.match('mobile'))
                    {
");
                WriteLiteral(@"                        self.desktop = false;
                        self.sidebar =""margin-left:0px;"";
                    }
                    else {
                        self.desktop = true;
                        self.sidebar=""margin-left:150px;"";
                    }
                },
                getShows: function(holiday){
                    var self = this;
                    self.shows = [];
                    $.ajax({
                        url: ""api/Episodes/""+holiday,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        success: function (data){

                            //Filtering help from Travis J: https://stackoverflow.com/questions/15125920/how-to-get-distinct-values-from-an-array-of-objects-in-javascript
                            var unique = {};
                            var distinct = [];
                                for( var i in data ");
                WriteLiteral(@"){
                                if( typeof(unique[data[i].showTitle]) == ""undefined""){
                                self.shows.push(
                                    show = {
                                        title: data[i].showTitle,
                                        id: data[i].showID,
                                        visible: true,
                                    }
                                    );
                                }
                                unique[data[i].showTitle] = 0;
                                }
                            self.episodes = data;
                        },
                        error: function(error){

                        }
                    })
                },
                getEpisodes: function(showID){
                    var self = this;
                    return self.episodes.filter(episode => episode.showID == showID)
                },
                searchShow: function(searchTer");
                WriteLiteral(@"m){
                    var self = this;
                    
                    if(self.searchTerm.length>=2){
                        self.showSearchResults = true;
                        $.ajax({
                        url: self.baseURL + ""search/tv?""+ self.apiKEY +""&language=en-US&query="" + self.searchTerm + ""&page=1"",
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        success: function (data){
                            self.searchResults = data.results.sort(function(a,b){
                                return b.popularity - a.popularity;
                            }).slice(0,3);
                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't find your shows. D:"");
                        }
                        });
                    }
                ");
                WriteLiteral(@"    else{
                        self.showSearchResults = false;
                    }
                },
                getOverviewSearch: function(episodeSearchTerm){
                    var self = this;
                    var searchTerm = {term: self.episodeSearchTerm};
                    if(self.episodeSearchTerm.length>=2){
                        $.ajax({
                        url: ""api/search/"" ,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        data: JSON.stringify(searchTerm),
                        success: function (data){
                            self.episodes = data;
                            self.getShows();
                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't find your shows. D:"");
                        }
                    ");
                WriteLiteral(@"    });
                    }
                    else{
                    }
                },
                emptySearch: function(){
                    var self = this;
                    self.searchResults = '';
                    self.searchTerm = '';
                    self.showSearchResults = false;
                    self.showHighlightedShow = false;
                },
                DeleteShow: function(item){
                    var self = this;                   
                   
                    $.ajax({
                        url: ""api/Episodes/Show/"" + item,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'DELETE',
                        success: function(show) {
                            self.shows.filter(show => ~[item].indexOf(show.id))[0].visible = false;
                            self.shows = self.shows.filter(show => show.id != item);
                            sel");
                WriteLiteral(@"f.episodes = self.episodes.filter(episode => episode.showID != item)
                        },
                        error: function(error){
                            console.log(error);
                        }
                    })
                },
                showDetails: function(item){
                    var self = this;
                    self.showSearchResults = false;
                    $.ajax({
                        url: self.baseURL + ""tv/"" + item.id + ""?""+ self.apiKEY +""&language=en-US"",
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        success: function (show) {
                            self.highlightedShow = show;
                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't find that show. D:"");
                        }
       ");
                WriteLiteral(@"             });
                    self.showHighlightedShow = true;
                },
                highlightShow: function(item){
                    var self = this;
                    self.showSearchResults = false;
                    console.log(item);
                    $.ajax({
                        url: self.baseURL + ""tv/"" + item.showID + ""/season/""+ item.seasonNumber + ""/episode/"" + item.episodeNumber+""?""+ self.apiKEY +""&language=en-US"",
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        success: function (show) {
                            self.highlightedEpisode = show;
                            self.highlightedEpisode.showName = item.showTitle;
                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't find that show. D:"");
               ");
                WriteLiteral(@"         }
                    });
                    self.showHighlightedEpisode = true;
                },
                getSeasonDetails: function(id,season){
                    var self = this;
                    $.ajax({
                        url: self.baseURL + ""tv/"" + id + ""/season/"" + season +""?""+ self.apiKEY +""&language=en-US"",
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET',
                        success: function (season) {

                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't find those episodes. D:"");
                        }
                    });
                },
                updateWatched: function(id){
                    var self = this;
                    var editEpisode = self.episodes.filter(episode => episode.episodeID == id)[0];
       ");
                WriteLiteral(@"             editEpisode.watched = !editEpisode.watched;
                    $.ajax({
                        url: ""api/Episodes/"" + id,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'PUT',
                        data: JSON.stringify(editEpisode),
                        success: function (episode) {
                            
                        },
                        error: function (error) {
                            console.log(error);
                            alert(""Oh no! We couldn't edit that show D:"");
                        }
                    });
                },
                toggleAllWatched: function(show){
                    var self = this;
                    var editEpisodes = self.episodes.filter(episode => episode.showID == show);
                    function isChecked(episode) {
                        return episode;
                    }
                    v");
                WriteLiteral(@"ar containsCheck = self.episodes.filter(episode => episode.showID == show).map(episode => episode.watched).includes(true);
                    var allChecked = self.episodes.filter(episode => episode.showID == show).map(episode => episode.watched).every(isChecked);
                    for(episode in editEpisodes){
                        if((containsCheck==true && allChecked==false) || (containsCheck == false && allChecked==false)){
                            editEpisodes[episode].watched = true;
                        }
                        else{editEpisodes[episode].watched = false;}
                        $.ajax({
                            url: ""api/Episodes/"" + editEpisodes[episode].episodeID,
                            dataType: 'json',
                            contentType: 'application/json',
                            method: 'PUT',
                            data: JSON.stringify(editEpisodes[episode]),
                            success: function (episode) {
              ");
                WriteLiteral(@"              },
                            error: function (error) {
                                console.log(error);
                                alert(""Oh no! We couldn't edit that show D:"");
                            }
                        });
                    }
                    
                },
                randomShow: function(){
                    var self = this;
                    self.highlightShow(self.episodes[Math.floor(Math.random() * self.episodes.length)]);
                },
                saveShow: function(item){
                    var self = this;
                    console.log(item.name);
                    let showNames = self.shows.map(a => a.title);
                    if (showNames.includes(item.name)){
                        showSearchResults = false;
                        showHighlightedShow = false;
                        self.emptySearch();
                        alert(""You've already saved that show."");
                    ");
                WriteLiteral(@"    
                    }
                    else{
                    for(var i = 0;i < self.highlightedShow.number_of_seasons;i++){
                        (function(){
                            var seasonnum = i;
                            setTimeout(function(){
                                $.ajax({
                                    url: self.baseURL + ""tv/"" + item.id + ""/season/"" + (seasonnum+1) +""?""+ self.apiKEY +""&language=en-US"",
                                    dataType: 'json',
                                    contentType: 'application/json',
                                    method: 'GET',
                                    success: function (season) {
                                        newSeason = {
                                            id: item.id,
                                            episodes: season.episodes,
                                            NumberOfSeasons: item.number_of_episodes,
                                            Seaso");
                WriteLiteral(@"n: season.season_number
                                        };
                                        
                                        for(var j = 0;j < season.episodes.length;j++){
                                            
                                            (function(){
                                                var episode = j;
                                                setTimeout(function(){
                                                    newEpisode = {
                                                        ShowID: item.id,
                                                        SeasonNumber: season.season_number,
                                                        ShowTitle: item.name,
                                                        ShowBackdropPath: item.backdrop_path,
                                                        ShowOverview: item.overview,
                                                        EpisodeAirDate: !season.episodes");
                WriteLiteral(@"[episode].air_date ? ""1700-01-01"" : season.episodes[episode].air_date,
                                                        EpisodeNumber: season.episodes[episode].episode_number,
                                                        EpisodeTitle: season.episodes[episode].name,
                                                        EpisodeOverview: season.episodes[episode].overview = """" ? ""null"" : season.episodes[episode].overview,
                                                        Watched: season.episodes[episode].watched
                                                    };
                                                    //self.ajaxEpisodes.push(newEpisode);
                                                    //console.log(newEpisode);
                                                    
                                                    var request = $.ajax({
                                                        url: ""api/Episodes"",
                                            ");
                WriteLiteral(@"            dataType: 'json',
                                                        contentType: 'application/json',
                                                        method: 'POST',
                                                        data: JSON.stringify(newEpisode),
                                                        success: function(reuslts){
                                                        },
                                                        error: function(error){
                                                            console.log(""oh no, we failed to save those episodes"");
                                                            console.log(error);
                                                        }
                                                    });
                                                    
                                                },1);
                                            })();  
                                     ");
                WriteLiteral(@"   }
                                        self.ajaxSeasons.push(newSeason);
                                    },
                                    error: function (error) {
                                        console.log(error);
                                        alert(""Oh no! We couldn't find those episodes. D:"");
                                    }
                                    
                                })
                            },100);
                            self.showHighlightedShow= false;
                            
                        })()
                    };
                
                };
                },
            },    
            computed: {
            }
        });
</script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
